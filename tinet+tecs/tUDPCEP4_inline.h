/*
 * This file was automatically generated by tecsgen.
 * Move and rename like below before editing,
 *   gen/tUDPCEP4_inline_template.h => src/tUDPCEP4_inline.h
 * to avoid to be overwritten by tecsgen.
 */
/* #[<PREAMBLE>]#
 * Don't edit the comments between #[<...>]# and #[</...>]#
 * These comment are used by tecsmerege when merging.
 *
 * attr access macro #_CAAM_#
 * v4addr           T_IN4_ADDR       ATTR_v4addr     
 * addr             T_IN4_ADDR       VAR_addr        
 *
 * #[</PREAMBLE>]# */
//#include "gen/tUDPCEP_tecsgen.h"
/* entry port function #_TEPF_# */
/* #[<ENTRY_PORT>]# eAPI4
 * entry port: eAPI4
 * signature:  sUDPCEPAPI4
 * context:    task
 * #[</ENTRY_PORT>]# */

/* #[<ENTRY_FUNC>]# eAPI4_send
 * name:         eAPI4_send
 * global_name:  tUDPCEP4_eAPI4_send
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline ER_UINT
eAPI4_send(CELLIDX idx, const int8_t* data, int32_t len, T_IN4_ADDR dstaddr, uint16_t dstport, TMO tmout)
{
	ER		ercd = E_OK;
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		return(E_ID);
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */
	//cAPI_send(data,len,(int8_t*)&dstaddr,4,dstport,tmout);
	tUDPCEP_eAPI_send(p_cellcb->_inib->cAPI,data,len,(int8_t*)&dstaddr,4,dstport,tmout);

	return(ercd);
}

/* #[<ENTRY_FUNC>]# eAPI4_receive
 * name:         eAPI4_receive
 * global_name:  tUDPCEP4_eAPI4_receive
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline ER_UINT
eAPI4_receive(CELLIDX idx, int8_t* data, int32_t len, TMO tmout)
{
	ER		ercd = E_OK;
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		return(E_ID);
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */
	cAPI_receive(data,len,tmout);

	return(ercd);
}

/* #[<ENTRY_FUNC>]# eAPI4_setFlag
 * name:         eAPI4_setFlag
 * global_name:  tUDPCEP4_eAPI4_setFlag
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline ER
eAPI4_setFlag(CELLIDX idx, uint32_t flag)
{
	ER		ercd = E_OK;
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		return(E_ID);
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */
	cAPI_setFlag(flag);

	return(ercd);
}

/* #[<ENTRY_PORT>]# eGetAddress4
 * entry port: eGetAddress4
 * signature:  sGetAddress
 * context:    task
 * #[</ENTRY_PORT>]# */

/* #[<ENTRY_FUNC>]# eGetAddress4_getAddress
 * name:         eGetAddress4_getAddress
 * global_name:  tUDPCEP4_eGetAddress4_getAddress
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline int8_t*
eGetAddress4_getAddress(CELLIDX idx)
{
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		/* Write error processing code here */
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */
	return (int8_t*)&VAR_addr;
}

/* #[<ENTRY_FUNC>]# eGetAddress4_getIPversion
 * name:         eGetAddress4_getIPversion
 * global_name:  tUDPCEP4_eGetAddress4_getIPversion
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline int8_t
eGetAddress4_getIPversion(CELLIDX idx)
{
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		/* Write error processing code here */
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */
	return 4;

}

